[{"/Users/theo/react-app/src/index.tsx":"1","/Users/theo/react-app/src/reportWebVitals.ts":"2","/Users/theo/react-app/src/components/A0_App/AppContainer.tsx":"3","/Users/theo/react-app/src/components/A0_App/App.tsx":"4","/Users/theo/react-app/src/components/A0_App/helper.ts":"5","/Users/theo/react-app/src/components/B1_Roadmap/Roadmap.tsx":"6","/Users/theo/react-app/src/components/B4_Team/Team.tsx":"7","/Users/theo/react-app/src/components/B3_FAQ/Faq.tsx":"8","/Users/theo/react-app/src/components/A1_Header/Header.tsx":"9","/Users/theo/react-app/src/components/B0_HomeNew/HomeNew.tsx":"10","/Users/theo/react-app/src/components/A2_BurgerMenu/BurgerMenu.tsx":"11","/Users/theo/react-app/src/components/A3_Footer/Footer.tsx":"12","/Users/theo/react-app/src/components/A4_Preloader/Preloader.tsx":"13","/Users/theo/react-app/src/components/B0_Home/Home.tsx":"14","/Users/theo/react-app/src/components/B2_Slider/SliderJS2.jsx":"15","/Users/theo/react-app/src/components/B0_HomeNew/helpers.ts":"16","/Users/theo/react-app/src/components/B4_Team/Card.tsx":"17","/Users/theo/react-app/src/assets/svg/svgIcons.tsx":"18","/Users/theo/react-app/src/components/common/SocialIcon/SocialIcon.tsx":"19","/Users/theo/react-app/src/components/B3_FAQ/Btn/Btn.tsx":"20","/Users/theo/react-app/src/components/common/ButtonLink/ButtomLink.tsx":"21","/Users/theo/react-app/src/components/common/SvgIcon/SvgIcon.tsx":"22"},{"size":335,"mtime":1644534165000,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1639680057000,"results":"25","hashOfConfig":"24"},{"size":351,"mtime":1644681121000,"results":"26","hashOfConfig":"24"},{"size":5302,"mtime":1644688514000,"results":"27","hashOfConfig":"24"},{"size":683,"mtime":1644184554000,"results":"28","hashOfConfig":"24"},{"size":2925,"mtime":1644691109000,"results":"29","hashOfConfig":"24"},{"size":2955,"mtime":1644668874000,"results":"30","hashOfConfig":"24"},{"size":4059,"mtime":1644381473000,"results":"31","hashOfConfig":"24"},{"size":2720,"mtime":1644670173000,"results":"32","hashOfConfig":"24"},{"size":5668,"mtime":1644297395000,"results":"33","hashOfConfig":"24"},{"size":2156,"mtime":1644391463000,"results":"34","hashOfConfig":"24"},{"size":629,"mtime":1644106157000,"results":"35","hashOfConfig":"24"},{"size":1551,"mtime":1644676116000,"results":"36","hashOfConfig":"24"},{"size":1970,"mtime":1644676071000,"results":"37","hashOfConfig":"24"},{"size":5311,"mtime":1644465125000,"results":"38","hashOfConfig":"24"},{"size":1184,"mtime":1644126532000,"results":"39","hashOfConfig":"24"},{"size":1137,"mtime":1644391014000,"results":"40","hashOfConfig":"24"},{"size":3291,"mtime":1644009002000,"results":"41","hashOfConfig":"24"},{"size":2215,"mtime":1644391625000,"results":"42","hashOfConfig":"24"},{"size":1501,"mtime":1644297280000,"results":"43","hashOfConfig":"24"},{"size":3379,"mtime":1644297280000,"results":"44","hashOfConfig":"24"},{"size":419,"mtime":1638428610000,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ljqgu1",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/theo/react-app/src/index.tsx",[],[],"/Users/theo/react-app/src/reportWebVitals.ts",[],[],"/Users/theo/react-app/src/components/A0_App/AppContainer.tsx",["118"],[],"import React,{useEffect} from 'react';\nimport {HashRouter} from \"react-router-dom\";\nimport {App} from \"./App\";\n// @ts-ignore\nimport AOS from 'aos';\nimport 'aos/dist/aos.css'; // You can also use <link> for styles\nexport const AppContainer = () => {\n    AOS.init();\n\n    return (\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    );\n}\n\n","/Users/theo/react-app/src/components/A0_App/App.tsx",[],[],"/Users/theo/react-app/src/components/A0_App/helper.ts",[],[],"/Users/theo/react-app/src/components/B1_Roadmap/Roadmap.tsx",[],[],"/Users/theo/react-app/src/components/B4_Team/Team.tsx",[],[],"/Users/theo/react-app/src/components/B3_FAQ/Faq.tsx",[],[],"/Users/theo/react-app/src/components/A1_Header/Header.tsx",["119"],[],"import React, {FC} from \"react\";\r\nimport {HashLink} from 'react-router-hash-link';\r\nimport style from \"./header.module.scss\";\r\nimport logo from \"../../assets/svg/header-logo.svg\";\r\nimport {SocialIcon} from \"../common/SocialIcon/SocialIcon\";\r\n\r\nimport {svgIcons} from \"../../assets/svg/svgIcons\";\r\nimport {SvgIcon} from \"../common/SvgIcon/SvgIcon\";\r\n\r\nimport connectD from \"../../assets/svg/buttons/connect-d.svg\";\r\nimport connectH from \"../../assets/svg/buttons/connect-h.svg\";\r\nimport connectC from \"../../assets/svg/buttons/connect-c.svg\";\r\nimport {ButtonLink} from \"../common/ButtonLink/ButtomLink\";\r\nimport clsx from \"clsx\";\r\n\r\nexport const links = [\r\n    \"RoadMap\",\r\n    \"Faq\",\r\n    \"Team\",\r\n];\r\n\r\nexport interface IHeader {\r\n    burgerMenuIsOpen: boolean\r\n    onClickHandler: (open: boolean) => void\r\n    dir: number\r\n    headerIsTransparent: boolean\r\n}\r\n\r\nexport const Header: FC<IHeader> = ({burgerMenuIsOpen, onClickHandler, dir,headerIsTransparent}) => {\r\n    return (\r\n        <header className={style.header}>\r\n\r\n            <div className={clsx({\r\n                [style.inner]: true,\r\n                [style.inner_hide]: dir === 1 && !headerIsTransparent,\r\n                [style.inner_transparent]: headerIsTransparent,\r\n            })}>\r\n\r\n                <a href=\"#\" className={style.logo}>\r\n                    <img src={logo} alt=\"\"/>\r\n                </a>\r\n\r\n                <nav className={style.links}>\r\n                    {\r\n                        links.map(link => <HashLink className={style.link}\r\n                                                    key={link}\r\n                                                    to={`/#${link}`}\r\n                                                    smooth={true}\r\n                        >\r\n                            {link}\r\n                        </HashLink>)\r\n                    }\r\n                </nav>\r\n\r\n                <div className={style.iconButtons}>\r\n                    <SocialIcon icon=\"twitter\" className={style.icon}/>\r\n                    <SocialIcon icon=\"discord\" className={style.icon}/>\r\n\r\n                    <ButtonLink  imgDefault={connectD}\r\n                                imgHover={connectH}\r\n                                imgClick={connectC}\r\n                                className={style.connectBtn}\r\n                    />\r\n\r\n                </div>\r\n\r\n                <button className={style.burgerButton}\r\n                        onClick={() => onClickHandler(!burgerMenuIsOpen)}\r\n                >\r\n                    <SvgIcon icon={\r\n                        burgerMenuIsOpen ? svgIcons.close : svgIcons.burger\r\n                    }/>\r\n                </button>\r\n\r\n            </div>\r\n\r\n        </header>\r\n    )\r\n}","/Users/theo/react-app/src/components/B0_HomeNew/HomeNew.tsx",["120","121","122"],[],"import React, {useEffect, useState} from \"react\";\r\nimport style from \"./homeNew.module.scss\";\r\n\r\nimport minusDefault from \"../../assets/svg/buttons/minus-d.svg\";\r\nimport minusHover from \"../../assets/svg/buttons/minus-h.svg\";\r\nimport minusClick from \"../../assets/svg/buttons/minus-c.svg\";\r\n\r\nimport plusDefault from \"../../assets/svg/buttons/plus-d.svg\";\r\nimport plusHover from \"../../assets/svg/buttons/plus-h.svg\";\r\nimport plusClick from \"../../assets/svg/buttons/plus-c.svg\";\r\n\r\nimport total from \"../../assets/png/home-total.png\";\r\n\r\nimport mintNowDefault from \"../../assets/svg/buttons/mint-now-d.svg\";\r\nimport mintNowHover from \"../../assets/svg/buttons/mint-now-h.svg\";\r\nimport mintNowClick from \"../../assets/svg/buttons/mint-now-c.svg\";\r\n\r\nimport {convertToTwoDigit, dateStart, getHours, getMins, getSecs} from \"./helpers\";\r\nimport {ButtonLink} from \"../common/ButtonLink/ButtomLink\";\r\n\r\nconst texts = [\r\n    [\"Starts: \", \"00am EST on 00.00.2022\"],\r\n    [\"Starting Price: 0 \", \"Eth\"],\r\n    [\"Price Drops By: \", \"000 until sold out or reaches 0 Eth floor\"],\r\n    [\"Price Drop Frequency: \", \"Every 30 Minutes\"],\r\n    [\"Max Mint Quantity: \", \"1 per wallet\"],\r\n    [\"End Time: \", \"00 hours\"],\r\n]\r\n\r\nexport const HomeNew = () => {\r\n    const max = 3;\r\n    const price = 0.21;\r\n    const [count, setCount] = useState(0);\r\n\r\n    const [timeIsOver, setTimeIsOver] = useState(false);\r\n    const [time, setTime] = useState(0);\r\n    const [start, setStart] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const time = new Date(14 * 24 * 60 * 60 * 1000 + dateStart.getTime() - new Date().getTime()).getTime();\r\n        if (time > 0 && !timeIsOver) {\r\n            setTime(time);\r\n            setStart(true);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const timeId = setTimeout(() => {\r\n            if (start) {\r\n                if (time <= 60000) {\r\n                    setTimeIsOver(true);\r\n                    clearTimeout(timeId);\r\n                } else {\r\n                    setTime(time => time - 1000);\r\n                }\r\n            }\r\n        }, 1000);\r\n        return () => {\r\n            clearTimeout(timeId);\r\n        }\r\n    }, [time]);\r\n\r\n\r\n    return (\r\n        <section className={style.homeNew}>\r\n            <div className={style.innerWrapper}>\r\n                <div className={style.leftBlock}>\r\n                    <h1 className={style.title}>THE SQUIDS Auction</h1>\r\n                    <div className={style.texts}>\r\n                        {\r\n                            texts.map((text, index) => (\r\n                                <p key={index} className={style.text}><span>{text[0]}</span><span>{text[1]}</span></p>\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                    <div className={style.timerBlock}>\r\n                        <span>{convertToTwoDigit(getHours(time))}</span>\r\n                        <span>:</span>\r\n                        <span>{convertToTwoDigit(getMins(time))}</span>\r\n                    </div>\r\n\r\n                    <p className={style.until}>Until the close of sales</p>\r\n\r\n\r\n                </div>\r\n                <div className={style.rightBlock}>\r\n                    <div className={style.card}>\r\n                        <p className={style.minted}>321/9000 minted</p>\r\n\r\n                        <div className={style.countWrapper}>\r\n\r\n                            <p className={style.mint}>MINT</p>\r\n\r\n                            <div className={style.countBlock}>\r\n\r\n                                <div className={style.countButtons}>\r\n\r\n                                    <ButtonLink imgDefault={minusDefault}\r\n                                                imgHover={minusHover}\r\n                                                imgClick={minusClick}\r\n                                                onClickHandler={() => setCount(count - 1)}\r\n                                                className={style.countButton}\r\n                                                disabled={count === 0}\r\n                                    />\r\n\r\n                                    <p className={style.count}>{count}</p>\r\n\r\n                                    <ButtonLink imgDefault={plusDefault}\r\n                                                imgHover={plusHover}\r\n                                                imgClick={plusClick}\r\n                                                onClick={() => setCount(count + 1)}\r\n                                                className={style.countButton}\r\n                                                disabled={count === max}\r\n                                    />\r\n\r\n                                </div>\r\n\r\n                                <div className={style.max}>\r\n                                    {`${max} max`}\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div className={style.totalBlock}>\r\n                            <div className={style.texts}>\r\n                                <p>total</p>\r\n                                <p>{price * count}</p>\r\n                            </div>\r\n                            <img src={total} alt=\"\" className={style.arrow}/>\r\n                        </div>\r\n\r\n                        <ButtonLink imgDefault={mintNowDefault}\r\n                                    imgHover={mintNowHover}\r\n                                    imgClick={mintNowClick}\r\n                                    className={style.mintNow}\r\n                         />\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}","/Users/theo/react-app/src/components/A2_BurgerMenu/BurgerMenu.tsx",[],[],"/Users/theo/react-app/src/components/A3_Footer/Footer.tsx",[],[],"/Users/theo/react-app/src/components/A4_Preloader/Preloader.tsx",["123"],[],"import React, {useEffect, useState} from \"react\";\r\nimport style from \"./preloader.module.scss\"\r\nimport preloader from \"../../assets/svg/preloader.svg\"\r\nimport clsx from \"clsx\";\r\n\r\nexport const Preloader = () => {\r\n    const duration = 2000;\r\n    const durationStep = Math.floor(duration / 100);\r\n    const [time, setTime] = useState(0);\r\n    const [timeIsOver, setTimeIsOver] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeId = setTimeout(() => {\r\n            if (!timeIsOver) {\r\n                if (time >= 100) {\r\n                    setTimeIsOver(true);\r\n                    clearTimeout(timeId);\r\n                } else {\r\n                    setTime(time => time + 1);\r\n                }\r\n            }\r\n        }, durationStep);\r\n        return () => {\r\n            clearTimeout(timeId);\r\n        }\r\n    }, [time]);\r\n\r\n\r\n    return (\r\n        <div className={clsx({\r\n            [style.preloader]: true,\r\n            [style.preloader_hide]: timeIsOver,\r\n        })}>\r\n            <div className={style.inner}>\r\n                <div className={style.tubeWrapper}>\r\n                    <div className={style.inner}>\r\n                        <div className={style.tube}\r\n                             style={{\r\n                                 height: `${time}%`\r\n                             }}\r\n                        />\r\n                    </div>\r\n                    <img src={preloader} alt=\"\"/>\r\n                </div>\r\n                <p className={style.text}>{`${time} %`}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","/Users/theo/react-app/src/components/B0_Home/Home.tsx",["124"],[],"import React, {FC,useState} from \"react\";\r\nimport style from \"./home.module.scss\"\r\nimport background from \"../../assets/gif/home-back.gif\";\r\nimport {SocialIcon} from \"../common/SocialIcon/SocialIcon\";\r\nimport enterD from \"../../assets/svg/buttons/enter-d.svg\";\r\nimport enterH from \"../../assets/svg/buttons/enter-h.svg\";\r\nimport enterC from \"../../assets/svg/buttons/enter-c.svg\";\r\nimport {ButtonLink} from \"../common/ButtonLink/ButtomLink\";\r\n// @ts-ignore\r\nimport GlitchText from 'react-glitch-effect/core/GlitchText';\r\n\r\ninterface IHome {\r\n    onClickHandler: () => void\r\n}\r\n\r\nexport const Home: FC<IHome> = ({onClickHandler}) => {\r\n    const [isDisabled, setDisabled] = useState(true);\r\n\r\n    return (\r\n        <section className={style.home}\r\n                 // style={{backgroundImage: `url(${background})`}}\r\n        >\r\n            <div className={style.innerWrapper}>\r\n                <GlitchText disabled={isDisabled}>\r\n                <h1 className={style.title}\r\n                    onMouseLeave={()=>setDisabled(true)}\r\n                    onMouseOver={()=>setDisabled(false)}>Only a game away of living debt free</h1>\r\n                </GlitchText>\r\n                <ButtonLink imgDefault={enterD}\r\n                            imgHover={enterH}\r\n                            imgClick={enterC}\r\n                            className={style.enterButton}\r\n                            onClickHandler={onClickHandler}\r\n                />\r\n\r\n                <div className={style.icons}>\r\n                    {\r\n                        [\"twitter\", \"discord\", \"metamask\"].map(icon => <SocialIcon key={icon}\r\n                                                                                   icon={icon}\r\n                                                                                   className={style.icon}\r\n                            />\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}","/Users/theo/react-app/src/components/B2_Slider/SliderJS2.jsx",["125"],[],"import React, {useEffect, useState} from \"react\";\r\nimport style from \"./slider.module.scss\"\r\nimport slide0 from \"../../assets/gif/slide0.gif\";\r\nimport slide1 from \"../../assets/gif/slide1.gif\";\r\nimport slide2 from \"../../assets/gif/slide2.gif\";\r\nimport slide3 from \"../../assets/gif/slide3.gif\";\r\nimport slide4 from \"../../assets/gif/slide4.gif\";\r\nimport slide5 from \"../../assets/gif/slide5.gif\";\r\nimport {Swiper, SwiperSlide} from \"swiper/react\";\r\nimport 'swiper/swiper-bundle.min.css';\r\nimport 'swiper/swiper.min.css';\r\nimport SwiperCore, {Controller} from 'swiper';\r\nimport slide6 from \"../../assets/gif/slide6.gif\";\r\nimport clsx from \"clsx\";\r\n\r\nconst slides = [\r\n    slide0,\r\n    slide1,\r\n    slide2,\r\n    slide3,\r\n    slide4,\r\n    slide5,\r\n    slide6,\r\n];\r\nSwiperCore.use([Controller]);\r\nexport const SliderJS2 = () => {\r\n    const [swiperTop, setSwiperTop] = useState(null);\r\n    const [swiperBottom, setSwiperBottom] = useState(null);\r\n\r\n    return (\r\n        <section className={style.slider}>\r\n            {/*<div className={style.buttons}>*/}\r\n            {/*    <IconButton disableRipple={true}*/}\r\n            {/*                disableTouchRipple={true}*/}\r\n            {/*                disableFocusRipple={true}*/}\r\n            {/*                onClick={() => {*/}\r\n            {/*                    swiperTop?.slidePrev();*/}\r\n            {/*                    swiperBottom?.slidePrev();*/}\r\n            {/*                }}*/}\r\n            {/*                style={{marginRight: \"32px\"}}*/}\r\n            {/*    >*/}\r\n            {/*        <ArrowBackIosIcon fontSize='large'/>*/}\r\n            {/*    </IconButton>*/}\r\n            {/*    <IconButton disableRipple={true}*/}\r\n            {/*                disableTouchRipple={true}*/}\r\n            {/*                disableFocusRipple={true}*/}\r\n            {/*                onClick={() => {*/}\r\n            {/*                    swiperTop?.slideNext();*/}\r\n            {/*                    swiperBottom?.slideNext();*/}\r\n            {/*                }}*/}\r\n            {/*    >*/}\r\n            {/*        <ArrowForwardIosIcon fontSize='large'/>*/}\r\n            {/*    </IconButton>*/}\r\n            {/*</div>*/}\r\n\r\n            <Swiper className={clsx(style.swiper, style.swiper_top)}\r\n                    slidesPerView=\"auto\"\r\n                    slidesPerGroup={1}\r\n                    dir=\"rtl\"\r\n                    loop={true}\r\n                    onSwiper={setSwiperTop}\r\n                    modules={[Controller]}\r\n                    controller={{control: swiperBottom }}\r\n                    breakpoints={{\r\n                        0: {\r\n                            spaceBetween: 16,\r\n                        },\r\n                        1440: {\r\n                            spaceBetween: 32,\r\n                        },\r\n                    }}\r\n            >\r\n                {\r\n                    slides.map((slide, index) => (\r\n                        <SwiperSlide key={index} className={style.slide}>\r\n                            <img src={slide} alt=\"\"/>\r\n                        </SwiperSlide>\r\n                    ))\r\n                }\r\n            </Swiper>\r\n\r\n            <Swiper className={clsx(style.swiper, style.swiper_bottom)}\r\n                    slidesPerView=\"auto\"\r\n                    slidesPerGroup={1}\r\n                    loop={true}\r\n                    onSwiper={setSwiperBottom}\r\n                    breakpoints={{\r\n                        0: {\r\n                            spaceBetween: 16,\r\n                        },\r\n                        1440: {\r\n                            spaceBetween: 32,\r\n                        },\r\n                    }}\r\n                    modules={[Controller]}\r\n                    controller={{ control: swiperTop }}\r\n            >\r\n                {\r\n                    slides.map((slide, index) => (\r\n                        <SwiperSlide key={index} className={style.slide}>\r\n                            <img src={slide} alt=\"\"/>\r\n                        </SwiperSlide>\r\n                    ))\r\n                }\r\n            </Swiper>\r\n\r\n            {/*<div className={style.buttons}>*/}\r\n            {/*    <IconButton disableRipple={true}*/}\r\n            {/*                disableTouchRipple={true}*/}\r\n            {/*                disableFocusRipple={true}*/}\r\n            {/*                onClick={() => {*/}\r\n            {/*                    swiperBottom?.slidePrev();*/}\r\n            {/*                    swiperTop?.slidePrev();*/}\r\n            {/*                }}*/}\r\n            {/*                style={{marginRight: \"32px\"}}*/}\r\n            {/*    >*/}\r\n            {/*        <ArrowBackIosIcon fontSize='large'/>*/}\r\n            {/*    </IconButton>*/}\r\n            {/*    <IconButton disableRipple={true}*/}\r\n            {/*                disableTouchRipple={true}*/}\r\n            {/*                disableFocusRipple={true}*/}\r\n            {/*                onClick={() => {*/}\r\n            {/*                    swiperBottom?.slideNext();*/}\r\n            {/*                    swiperTop?.slideNext();*/}\r\n            {/*                }}*/}\r\n            {/*    >*/}\r\n            {/*        <ArrowForwardIosIcon fontSize='large'/>*/}\r\n            {/*    </IconButton>*/}\r\n            {/*</div>*/}\r\n        </section>\r\n    )\r\n}","/Users/theo/react-app/src/components/B0_HomeNew/helpers.ts",[],[],"/Users/theo/react-app/src/components/B4_Team/Card.tsx",[],[],"/Users/theo/react-app/src/assets/svg/svgIcons.tsx",[],[],"/Users/theo/react-app/src/components/common/SocialIcon/SocialIcon.tsx",[],[],"/Users/theo/react-app/src/components/B3_FAQ/Btn/Btn.tsx",[],[],"/Users/theo/react-app/src/components/common/ButtonLink/ButtomLink.tsx",[],[],"/Users/theo/react-app/src/components/common/SvgIcon/SvgIcon.tsx",[],[],{"ruleId":"126","severity":1,"message":"127","line":1,"column":15,"nodeType":"128","messageId":"129","endLine":1,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":39,"column":17,"nodeType":"132","endLine":39,"endColumn":52},{"ruleId":"126","severity":1,"message":"133","line":18,"column":58,"nodeType":"128","messageId":"129","endLine":18,"endColumn":65},{"ruleId":"134","severity":1,"message":"135","line":45,"column":8,"nodeType":"136","endLine":45,"endColumn":10,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":61,"column":8,"nodeType":"136","endLine":61,"endColumn":14,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":26,"column":8,"nodeType":"136","endLine":26,"endColumn":14,"suggestions":"141"},{"ruleId":"126","severity":1,"message":"142","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":18},{"ruleId":"143","severity":1,"message":"127","line":1,"column":16,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getSecs' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'timeIsOver'. Either include it or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has a missing dependency: 'start'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has missing dependencies: 'durationStep' and 'timeIsOver'. Either include them or remove the dependency array.",["146"],"'background' is defined but never used.","no-unused-vars",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [timeIsOver]",{"range":"153","text":"154"},"Update the dependencies array to be: [start, time]",{"range":"155","text":"156"},"Update the dependencies array to be: [durationStep, time, timeIsOver]",{"range":"157","text":"158"},[1729,1731],"[timeIsOver]",[2159,2165],"[start, time]",[829,835],"[durationStep, time, timeIsOver]"]